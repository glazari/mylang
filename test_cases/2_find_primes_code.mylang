fn main() {
  let num: u64 = 2;
  let p: u64 = 0;
  while (num < 200) {
    if (is_prime(num) == 1) {
      print_numberln(num);
    }
    num = num + 1;
  }
}


fn is_prime(num) {
  let i: u64 = 2;
  while (i < num) {
    if (num % i == 0) {
      return 0;
    }
    i = i + 1;
  }
  return 1;
}

fn print_numberln(num) {
  let num_size: u64 = 0;
  let cp_num: u64 = num;
  while (cp_num > 0) {
    cp_num = cp_num / 10;
    num_size = num_size + 1;
  }
  let digit: u64 = 0;
  let base: u64 = 0;

  while (num > 0) {
    base = pow(10, num_size-1);
    digit = num / base + 48;
    print_chr(digit);
    num = num % base;
    num_size = num_size - 1;
  } 
  print_chr(10);
}

fn pow(base, exp) {
  let prod: u64 = 1;
  while (exp > 0) {
    prod = prod * base;
    exp = exp - 1;
  }
  return prod;
}

fn print_chr(a) {
  asm {
    mov rsi, rbp
    add rsi, 24 ; point to address of a
    mov rdx, 1 ; length
    mov rax, 1 ; write syscall
    mov rdi, 1 ; stdout file handle
    syscall
  }
}

