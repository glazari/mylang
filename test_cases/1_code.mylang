fn main() -> u64 {
	// Testing basic expression priority
	print_numberln(1 + 2 + 4);

  //  subtraction
	print_numberln(4 + 2 - 1);

  // multiplication precedence
	print_numberln(2+3*5);

  // division precendence over addition
	print_numberln(3+60/5);

  // modulus precidence over subtraction
	print_numberln(6- 20%6);

  // Comparisson has the least of all precidences
  if ( 2 + 3 > 1 + 80 ) {
    print_numberln(666);
  } else {
    print_numberln(42);
  }


  let count: i64 = 0;
  while (count < 11) {
    print_numberln(count);
    count = count + 1;
  }
}


fn print_numberln(num: i64) -> u64 {
  let num_size: i64 = 0;
  let cp_num: i64 = num;
  while (cp_num > 0) {
    cp_num = cp_num / 10;
    num_size = num_size + 1;
  }
  let digit: i64 = 0;
  let base: i64 = 0;

  if (num_size == 0) {
    num_size = 1;
  }

  while (num_size > 0) {
    base = pow(10, num_size-1);
    digit = num / base + 48;
    print_chr(digit);
    num = num % base;
    num_size = num_size - 1;
  } 
  print_chr(10);
}

fn pow(base: i64, exp: i64) -> i64 {
  let prod: i64 = 1;
  while (exp > 0) {
    prod = prod * base;
    exp = exp - 1;
  }
  return prod;
}

fn print_chr(a: i64) -> i64 {
  asm {
    mov rsi, rbp
    add rsi, 24 ; point to address of a
    mov rdx, 1 ; length
    mov rax, 1 ; write syscall
    mov rdi, 1 ; stdout file handle
    syscall
  }
}
