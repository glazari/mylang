fn main() {
  init(); 
  print_nln(123);
  print_nln(1);
  print_nln(10);
  print_nln(0);
  print_nln(0000);
  print_nln(10000);
  print_hexln(10000);
}

// --------------------------------------------------
// prelude-like area, helper functions
// --------------------------------------------------

global current_brk = 0;
fn init_brk() {
  current_brk = brk(0);
}

fn malloc(num_bytes) {
  let pointer = current_brk;
  let expected_new = pointer + num_bytes;
  current_brk = brk(expected_new);
  if (current_brk != expected_new) {
    // allocation failed, exit program
    exit(1);
  }
  return pointer;
}

fn init() {
  init_brk();
  init_print_nln();
  init_num_to_string();
}


global print_nln_bff = 0;
fn init_print_nln() {
  print_nln_bff = malloc(1024);
}
fn print_nln(number) {
  let len = num_to_string(number, print_nln_bff, 10);
  write(1, print_nln_bff, len);
}
fn print_hexln(number) {
  asm {
    mov rax, {print_nln_bff}
    mov dx, 0x7830 ; 0x
    mov [rax], dx
  }
  let len = num_to_string(number, print_nln_bff + 2, 16);
  write(1, print_nln_bff, len + 2);
}


global num_to_string_bff = 0;
fn init_num_to_string() {
  num_to_string_bff = malloc(50);
}
fn num_to_string(number, address, base) {
  let digit = 0;
  let tmp_add = num_to_string_bff;

  do {
    digit = number % base;
    number = number / base;
    if (digit < 11) {
    	digit = digit + 48; //convert to ascii digit
    } else {
    	digit = digit - 10 + 97; // convert to hex letters
    }
    // store in 
    asm {
      mov rdx, {digit}
      mov rax, {tmp_add}
      mov byte [rax], dl 
    }
    tmp_add = tmp_add + 1;
    
  } while (number > 0);

  let len = tmp_add - num_to_string_bff;
  tmp_add = tmp_add - 1;

  let i = 0;
  while (i < len) {
    asm {
      mov rax, {tmp_add}
      mov byte dl, [rax]
      mov rax, {address} ; address points to a location that has the address
      mov byte [rax], dl
    }
    i = i + 1;
    address = address + 1;
    tmp_add = tmp_add - 1;
  }

  asm {
    mov rax, {address}
    mov byte [rax], 10 ; add new line
  }
  len = len + 1;
  return len;
}

fn ptr_get(addr) {
  let out = 0;
  asm {
    mov rax, {addr}
    mov rbx, [rax]
    mov {out}, rbx
  }
  return out;
}

fn ptr_store(addr, val) {
  asm {
    mov rax, {val}
    mov rbx, {addr} 
    mov [rbx], rax
  }
}

// --------------------------------------------------
//  System calls
// --------------------------------------------------

fn exit(code) { // exits program with exit_code
  asm {
    mov rax, 60     
    mov rdi, {code}
    syscall
  }
}

fn brk(address) {
  let new_brk = 0;
  asm {
    mov rax, 12 ; brk syscall
    mov rdi, {address}
    syscall
    mov {new_brk}, rax ; store new program break
  }
  return new_brk;
}

fn write(fd, msg_addr, len) {
  asm {
    mov rax, 1
    mov rdi, {fd}
    mov rsi, {msg_addr}
    mov rdx, {len}
    syscall
  }
}
