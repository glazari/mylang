fn main() {
  let ch = 50;
  a = print_number(987654123);
  let a = print_chrln(10);
}

fn print_numberln(num) {
  let a = print_number(num);
  a = print_chr(10);
}

fn print_number(num) {
  let num_size = 0;
  let cp_num = num;
  while (cp_num > 0) {
    cp_num = cp_num / 10;
    num_size = num_size + 1;
  }
  let digit = 0;
  let base = 0;

  while (num > 0) {
    base = pow(10, num_size-1);
    digit = num / base;
    cp_num = print_digit(digit);
    num = num % base;
    num_size = num_size - 1;
  } 
  
}

fn pow(base, exp) {
  let prod = 1;
  while (exp > 0) {
    prod = prod * base;
    exp = exp - 1;
  }
  return prod;
}

fn print_digit(d) {
  let c = d + 48;
  let a = print_chr(c);
}

fn print_chrln(c) {
  let a = print_chr(c);
  a = print_chr(10);
}

fn print_chr(a) {
  asm {
    mov rsi, rbp
    add rsi, 24 ; point to address of a
    mov rdx, 1 ; length
    mov rax, 1 ; write syscall
    mov rdi, 1 ; stdout file handle
    syscall
  }
}

fn add_all(range) {
  let sum = 0;
  let num = 1;
  while (num < range) {
    sum = sum + num;
    num = num + 1;
  }
  return sum;
}

fn add_all_do_while(range) {
  let sum = 0;
  let num = 1;
  do {
    sum = sum + num;
    num = num + 1;
  } while (num < range);
}
